
6_intturrupt_ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000400  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000594  0800059c  0000159c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000594  08000594  0000159c  2**0
                  CONTENTS
  4 .ARM          00000000  08000594  08000594  0000159c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000594  0800059c  0000159c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000594  08000594  00001594  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000598  08000598  00001598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  0000159c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000159c  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00002000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000159c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000f7f  00000000  00000000  000015cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000004b9  00000000  00000000  0000254b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000e8  00000000  00000000  00002a08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000009d  00000000  00000000  00002af0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015bd8  00000000  00000000  00002b8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000123b  00000000  00000000  00018765  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000765a0  00000000  00000000  000199a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0008ff40  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000024c  00000000  00000000  0008ff84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005a  00000000  00000000  000901d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800057c 	.word	0x0800057c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	0800057c 	.word	0x0800057c

080001d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	4603      	mov	r3, r0
 80001dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e2:	2b00      	cmp	r3, #0
 80001e4:	db0b      	blt.n	80001fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001e6:	79fb      	ldrb	r3, [r7, #7]
 80001e8:	f003 021f 	and.w	r2, r3, #31
 80001ec:	4907      	ldr	r1, [pc, #28]	@ (800020c <__NVIC_EnableIRQ+0x38>)
 80001ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f2:	095b      	lsrs	r3, r3, #5
 80001f4:	2001      	movs	r0, #1
 80001f6:	fa00 f202 	lsl.w	r2, r0, r2
 80001fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80001fe:	bf00      	nop
 8000200:	370c      	adds	r7, #12
 8000202:	46bd      	mov	sp, r7
 8000204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000208:	4770      	bx	lr
 800020a:	bf00      	nop
 800020c:	e000e100 	.word	0xe000e100

08000210 <pa0_adc_interrupt_init>:
#define CE_ADSTART				(1U << 2)
#define ISR_EOC					(1U << 2)
#define CR_CONT					(1U << 13)
#define CR1_EOCIE				(1U << 2)

void pa0_adc_interrupt_init(void){
 8000210:	b580      	push	{r7, lr}
 8000212:	af00      	add	r7, sp, #0
	//enable clock access to ADC pin port A
	RCC -> AHBENR |= GPIOAEN;
 8000214:	4b1a      	ldr	r3, [pc, #104]	@ (8000280 <pa0_adc_interrupt_init+0x70>)
 8000216:	695b      	ldr	r3, [r3, #20]
 8000218:	4a19      	ldr	r2, [pc, #100]	@ (8000280 <pa0_adc_interrupt_init+0x70>)
 800021a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800021e:	6153      	str	r3, [r2, #20]

	//Set the mode of PA0 to analog
	GPIOA -> MODER |= (1U << 0);
 8000220:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800022a:	f043 0301 	orr.w	r3, r3, #1
 800022e:	6013      	str	r3, [r2, #0]
	GPIOA -> MODER |= (1U << 1);
 8000230:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000234:	681b      	ldr	r3, [r3, #0]
 8000236:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800023a:	f043 0302 	orr.w	r3, r3, #2
 800023e:	6013      	str	r3, [r2, #0]

	//Enable clock access to ADC
	RCC ->AHBENR |= ADC1EN;
 8000240:	4b0f      	ldr	r3, [pc, #60]	@ (8000280 <pa0_adc_interrupt_init+0x70>)
 8000242:	695b      	ldr	r3, [r3, #20]
 8000244:	4a0e      	ldr	r2, [pc, #56]	@ (8000280 <pa0_adc_interrupt_init+0x70>)
 8000246:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800024a:	6153      	str	r3, [r2, #20]

	//Enable EOCIE interrupt
	ADC1 -> IER |= CR1_EOCIE;
 800024c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000250:	685b      	ldr	r3, [r3, #4]
 8000252:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000256:	f043 0304 	orr.w	r3, r3, #4
 800025a:	6053      	str	r3, [r2, #4]

	//Enable interrupt in NVIC
	NVIC_EnableIRQ(ADC1_2_IRQn);
 800025c:	2012      	movs	r0, #18
 800025e:	f7ff ffb9 	bl	80001d4 <__NVIC_EnableIRQ>

	//configure ADC parameters
	//conversion sequence start
	ADC1 -> SQR1 = ADC_CH1;
 8000262:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000266:	2240      	movs	r2, #64	@ 0x40
 8000268:	631a      	str	r2, [r3, #48]	@ 0x30

	//Conversion of sequence length (channel length)
	//Since in the board Sequence register one itself contains length of channel and its already configured to 0000, no further changes are made

	//Enable ADC module
	ADC1 -> CR |= CR_ADCEN;
 800026a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800026e:	689b      	ldr	r3, [r3, #8]
 8000270:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000274:	f043 0301 	orr.w	r3, r3, #1
 8000278:	6093      	str	r3, [r2, #8]
}
 800027a:	bf00      	nop
 800027c:	bd80      	pop	{r7, pc}
 800027e:	bf00      	nop
 8000280:	40021000 	.word	0x40021000

08000284 <start_conversion>:

	//Enable ADC module
	ADC1 -> CR |= CR_ADCEN;
}

void start_conversion(){
 8000284:	b480      	push	{r7}
 8000286:	af00      	add	r7, sp, #0
	//Enable start conversion
	ADC1 -> CFGR |= CR_CONT;
 8000288:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800028c:	68db      	ldr	r3, [r3, #12]
 800028e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000292:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000296:	60d3      	str	r3, [r2, #12]

	/*Start ADC Conversion*/
	ADC1 -> CR |= CE_ADSTART;
 8000298:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800029c:	689b      	ldr	r3, [r3, #8]
 800029e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80002a2:	f043 0304 	orr.w	r3, r3, #4
 80002a6:	6093      	str	r3, [r2, #8]
}
 80002a8:	bf00      	nop
 80002aa:	46bd      	mov	sp, r7
 80002ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b0:	4770      	bx	lr
	...

080002b4 <main>:
#define GPIOEEN			(1U << 21)

#define PIN9			(1U << 9)
#define PIN8			(1U << 8)

int main(void){
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b082      	sub	sp, #8
 80002b8:	af00      	add	r7, sp, #0

	usart_rxtx_init();
 80002ba:	f000 f865 	bl	8000388 <usart_rxtx_init>
	pa0_adc_interrupt_init();
 80002be:	f7ff ffa7 	bl	8000210 <pa0_adc_interrupt_init>
	start_conversion();
 80002c2:	f7ff ffdf 	bl	8000284 <start_conversion>

	//Enable clock access GPIOE
	RCC -> AHBENR |= GPIOEEN;
 80002c6:	4b1a      	ldr	r3, [pc, #104]	@ (8000330 <main+0x7c>)
 80002c8:	695b      	ldr	r3, [r3, #20]
 80002ca:	4a19      	ldr	r2, [pc, #100]	@ (8000330 <main+0x7c>)
 80002cc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80002d0:	6153      	str	r3, [r2, #20]

	//Set PE9 to output mode
	GPIOE -> MODER |= (1U << 18);
 80002d2:	4b18      	ldr	r3, [pc, #96]	@ (8000334 <main+0x80>)
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	4a17      	ldr	r2, [pc, #92]	@ (8000334 <main+0x80>)
 80002d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80002dc:	6013      	str	r3, [r2, #0]
	GPIOE -> MODER &=~(1U << 19);
 80002de:	4b15      	ldr	r3, [pc, #84]	@ (8000334 <main+0x80>)
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	4a14      	ldr	r2, [pc, #80]	@ (8000334 <main+0x80>)
 80002e4:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 80002e8:	6013      	str	r3, [r2, #0]

	//Set PE8 to output mode
	GPIOE -> MODER |= (1U << 16);
 80002ea:	4b12      	ldr	r3, [pc, #72]	@ (8000334 <main+0x80>)
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	4a11      	ldr	r2, [pc, #68]	@ (8000334 <main+0x80>)
 80002f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80002f4:	6013      	str	r3, [r2, #0]
	GPIOE -> MODER &=~(1U << 17);
 80002f6:	4b0f      	ldr	r3, [pc, #60]	@ (8000334 <main+0x80>)
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	4a0e      	ldr	r2, [pc, #56]	@ (8000334 <main+0x80>)
 80002fc:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8000300:	6013      	str	r3, [r2, #0]

	GPIOE -> ODR ^= PIN9;
 8000302:	4b0c      	ldr	r3, [pc, #48]	@ (8000334 <main+0x80>)
 8000304:	695b      	ldr	r3, [r3, #20]
 8000306:	4a0b      	ldr	r2, [pc, #44]	@ (8000334 <main+0x80>)
 8000308:	f483 7300 	eor.w	r3, r3, #512	@ 0x200
 800030c:	6153      	str	r3, [r2, #20]

	while(1){
		GPIOE -> ODR ^= PIN8;
 800030e:	4b09      	ldr	r3, [pc, #36]	@ (8000334 <main+0x80>)
 8000310:	695b      	ldr	r3, [r3, #20]
 8000312:	4a08      	ldr	r2, [pc, #32]	@ (8000334 <main+0x80>)
 8000314:	f483 7380 	eor.w	r3, r3, #256	@ 0x100
 8000318:	6153      	str	r3, [r2, #20]
		for (int i = 0; i < 100000; i++){}
 800031a:	2300      	movs	r3, #0
 800031c:	607b      	str	r3, [r7, #4]
 800031e:	e002      	b.n	8000326 <main+0x72>
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	3301      	adds	r3, #1
 8000324:	607b      	str	r3, [r7, #4]
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	4a03      	ldr	r2, [pc, #12]	@ (8000338 <main+0x84>)
 800032a:	4293      	cmp	r3, r2
 800032c:	ddf8      	ble.n	8000320 <main+0x6c>
		GPIOE -> ODR ^= PIN8;
 800032e:	e7ee      	b.n	800030e <main+0x5a>
 8000330:	40021000 	.word	0x40021000
 8000334:	48001000 	.word	0x48001000
 8000338:	0001869f 	.word	0x0001869f

0800033c <adc_callback>:
	}
}

static void adc_callback(void){
 800033c:	b480      	push	{r7}
 800033e:	af00      	add	r7, sp, #0
	GPIOE -> ODR ^= PIN9;
 8000340:	4b05      	ldr	r3, [pc, #20]	@ (8000358 <adc_callback+0x1c>)
 8000342:	695b      	ldr	r3, [r3, #20]
 8000344:	4a04      	ldr	r2, [pc, #16]	@ (8000358 <adc_callback+0x1c>)
 8000346:	f483 7300 	eor.w	r3, r3, #512	@ 0x200
 800034a:	6153      	str	r3, [r2, #20]
}
 800034c:	bf00      	nop
 800034e:	46bd      	mov	sp, r7
 8000350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000354:	4770      	bx	lr
 8000356:	bf00      	nop
 8000358:	48001000 	.word	0x48001000

0800035c <ADC1_2_IRQHandler>:

void ADC1_2_IRQHandler(void){
 800035c:	b580      	push	{r7, lr}
 800035e:	af00      	add	r7, sp, #0
	//check for EOC status register
	if((ADC1 -> ISR &  SR_EOC) != 0){
 8000360:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	f003 0304 	and.w	r3, r3, #4
 800036a:	2b00      	cmp	r3, #0
 800036c:	d009      	beq.n	8000382 <ADC1_2_IRQHandler+0x26>
		//Clear EOC
		ADC1 -> ISR |= SR_EOC;
 800036e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000378:	f043 0304 	orr.w	r3, r3, #4
 800037c:	6013      	str	r3, [r2, #0]

		adc_callback();
 800037e:	f7ff ffdd 	bl	800033c <adc_callback>
	}

}
 8000382:	bf00      	nop
 8000384:	bd80      	pop	{r7, pc}
	...

08000388 <usart_rxtx_init>:
 8000388:	b580      	push	{r7, lr}
 800038a:	af00      	add	r7, sp, #0
 800038c:	4b3e      	ldr	r3, [pc, #248]	@ (8000488 <usart_rxtx_init+0x100>)
 800038e:	695b      	ldr	r3, [r3, #20]
 8000390:	4a3d      	ldr	r2, [pc, #244]	@ (8000488 <usart_rxtx_init+0x100>)
 8000392:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000396:	6153      	str	r3, [r2, #20]
 8000398:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80003a2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80003a6:	6013      	str	r3, [r2, #0]
 80003a8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80003b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80003b6:	6013      	str	r3, [r2, #0]
 80003b8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80003bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80003be:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80003c2:	f043 0310 	orr.w	r3, r3, #16
 80003c6:	6253      	str	r3, [r2, #36]	@ 0x24
 80003c8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80003cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80003ce:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80003d2:	f043 0320 	orr.w	r3, r3, #32
 80003d6:	6253      	str	r3, [r2, #36]	@ 0x24
 80003d8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80003dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80003de:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80003e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80003e6:	6253      	str	r3, [r2, #36]	@ 0x24
 80003e8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80003ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80003ee:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80003f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80003f6:	6253      	str	r3, [r2, #36]	@ 0x24
 80003f8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000402:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000406:	6013      	str	r3, [r2, #0]
 8000408:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000412:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8000416:	6013      	str	r3, [r2, #0]
 8000418:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800041c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800041e:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000422:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000426:	6253      	str	r3, [r2, #36]	@ 0x24
 8000428:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800042c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800042e:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000432:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000436:	6253      	str	r3, [r2, #36]	@ 0x24
 8000438:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800043c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800043e:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000442:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000446:	6253      	str	r3, [r2, #36]	@ 0x24
 8000448:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800044c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800044e:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000452:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8000456:	6253      	str	r3, [r2, #36]	@ 0x24
 8000458:	4b0b      	ldr	r3, [pc, #44]	@ (8000488 <usart_rxtx_init+0x100>)
 800045a:	699b      	ldr	r3, [r3, #24]
 800045c:	4a0a      	ldr	r2, [pc, #40]	@ (8000488 <usart_rxtx_init+0x100>)
 800045e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000462:	6193      	str	r3, [r2, #24]
 8000464:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000468:	4908      	ldr	r1, [pc, #32]	@ (800048c <usart_rxtx_init+0x104>)
 800046a:	4809      	ldr	r0, [pc, #36]	@ (8000490 <usart_rxtx_init+0x108>)
 800046c:	f000 f812 	bl	8000494 <uart_set_baudrate>
 8000470:	4b07      	ldr	r3, [pc, #28]	@ (8000490 <usart_rxtx_init+0x108>)
 8000472:	220c      	movs	r2, #12
 8000474:	601a      	str	r2, [r3, #0]
 8000476:	4b06      	ldr	r3, [pc, #24]	@ (8000490 <usart_rxtx_init+0x108>)
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	4a05      	ldr	r2, [pc, #20]	@ (8000490 <usart_rxtx_init+0x108>)
 800047c:	f043 0301 	orr.w	r3, r3, #1
 8000480:	6013      	str	r3, [r2, #0]
 8000482:	bf00      	nop
 8000484:	bd80      	pop	{r7, pc}
 8000486:	bf00      	nop
 8000488:	40021000 	.word	0x40021000
 800048c:	00f42400 	.word	0x00f42400
 8000490:	40013800 	.word	0x40013800

08000494 <uart_set_baudrate>:
 8000494:	b580      	push	{r7, lr}
 8000496:	b084      	sub	sp, #16
 8000498:	af00      	add	r7, sp, #0
 800049a:	60f8      	str	r0, [r7, #12]
 800049c:	60b9      	str	r1, [r7, #8]
 800049e:	607a      	str	r2, [r7, #4]
 80004a0:	6879      	ldr	r1, [r7, #4]
 80004a2:	68b8      	ldr	r0, [r7, #8]
 80004a4:	f000 f808 	bl	80004b8 <compute_uart_bd>
 80004a8:	4603      	mov	r3, r0
 80004aa:	461a      	mov	r2, r3
 80004ac:	68fb      	ldr	r3, [r7, #12]
 80004ae:	60da      	str	r2, [r3, #12]
 80004b0:	bf00      	nop
 80004b2:	3710      	adds	r7, #16
 80004b4:	46bd      	mov	sp, r7
 80004b6:	bd80      	pop	{r7, pc}

080004b8 <compute_uart_bd>:
 80004b8:	b480      	push	{r7}
 80004ba:	b083      	sub	sp, #12
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
 80004c0:	6039      	str	r1, [r7, #0]
 80004c2:	683b      	ldr	r3, [r7, #0]
 80004c4:	085a      	lsrs	r2, r3, #1
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	441a      	add	r2, r3
 80004ca:	683b      	ldr	r3, [r7, #0]
 80004cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80004d0:	b29b      	uxth	r3, r3
 80004d2:	4618      	mov	r0, r3
 80004d4:	370c      	adds	r7, #12
 80004d6:	46bd      	mov	sp, r7
 80004d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004dc:	4770      	bx	lr
	...

080004e0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80004e0:	480d      	ldr	r0, [pc, #52]	@ (8000518 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80004e2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80004e4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004e8:	480c      	ldr	r0, [pc, #48]	@ (800051c <LoopForever+0x6>)
  ldr r1, =_edata
 80004ea:	490d      	ldr	r1, [pc, #52]	@ (8000520 <LoopForever+0xa>)
  ldr r2, =_sidata
 80004ec:	4a0d      	ldr	r2, [pc, #52]	@ (8000524 <LoopForever+0xe>)
  movs r3, #0
 80004ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004f0:	e002      	b.n	80004f8 <LoopCopyDataInit>

080004f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004f6:	3304      	adds	r3, #4

080004f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004fc:	d3f9      	bcc.n	80004f2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004fe:	4a0a      	ldr	r2, [pc, #40]	@ (8000528 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000500:	4c0a      	ldr	r4, [pc, #40]	@ (800052c <LoopForever+0x16>)
  movs r3, #0
 8000502:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000504:	e001      	b.n	800050a <LoopFillZerobss>

08000506 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000506:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000508:	3204      	adds	r2, #4

0800050a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800050a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800050c:	d3fb      	bcc.n	8000506 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800050e:	f000 f811 	bl	8000534 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000512:	f7ff fecf 	bl	80002b4 <main>

08000516 <LoopForever>:

LoopForever:
  b LoopForever
 8000516:	e7fe      	b.n	8000516 <LoopForever>
  ldr   r0, =_estack
 8000518:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 800051c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000520:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000524:	0800059c 	.word	0x0800059c
  ldr r2, =_sbss
 8000528:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800052c:	2000001c 	.word	0x2000001c

08000530 <ADC3_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000530:	e7fe      	b.n	8000530 <ADC3_IRQHandler>
	...

08000534 <__libc_init_array>:
 8000534:	b570      	push	{r4, r5, r6, lr}
 8000536:	4d0d      	ldr	r5, [pc, #52]	@ (800056c <__libc_init_array+0x38>)
 8000538:	4c0d      	ldr	r4, [pc, #52]	@ (8000570 <__libc_init_array+0x3c>)
 800053a:	1b64      	subs	r4, r4, r5
 800053c:	10a4      	asrs	r4, r4, #2
 800053e:	2600      	movs	r6, #0
 8000540:	42a6      	cmp	r6, r4
 8000542:	d109      	bne.n	8000558 <__libc_init_array+0x24>
 8000544:	4d0b      	ldr	r5, [pc, #44]	@ (8000574 <__libc_init_array+0x40>)
 8000546:	4c0c      	ldr	r4, [pc, #48]	@ (8000578 <__libc_init_array+0x44>)
 8000548:	f000 f818 	bl	800057c <_init>
 800054c:	1b64      	subs	r4, r4, r5
 800054e:	10a4      	asrs	r4, r4, #2
 8000550:	2600      	movs	r6, #0
 8000552:	42a6      	cmp	r6, r4
 8000554:	d105      	bne.n	8000562 <__libc_init_array+0x2e>
 8000556:	bd70      	pop	{r4, r5, r6, pc}
 8000558:	f855 3b04 	ldr.w	r3, [r5], #4
 800055c:	4798      	blx	r3
 800055e:	3601      	adds	r6, #1
 8000560:	e7ee      	b.n	8000540 <__libc_init_array+0xc>
 8000562:	f855 3b04 	ldr.w	r3, [r5], #4
 8000566:	4798      	blx	r3
 8000568:	3601      	adds	r6, #1
 800056a:	e7f2      	b.n	8000552 <__libc_init_array+0x1e>
 800056c:	08000594 	.word	0x08000594
 8000570:	08000594 	.word	0x08000594
 8000574:	08000594 	.word	0x08000594
 8000578:	08000598 	.word	0x08000598

0800057c <_init>:
 800057c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800057e:	bf00      	nop
 8000580:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000582:	bc08      	pop	{r3}
 8000584:	469e      	mov	lr, r3
 8000586:	4770      	bx	lr

08000588 <_fini>:
 8000588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800058a:	bf00      	nop
 800058c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800058e:	bc08      	pop	{r3}
 8000590:	469e      	mov	lr, r3
 8000592:	4770      	bx	lr
