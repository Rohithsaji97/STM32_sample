
6_interrupt_Timer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000274  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000408  08000410  00001410  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000408  08000408  00001410  2**0
                  CONTENTS
  4 .ARM          00000000  08000408  08000408  00001410  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000408  08000410  00001410  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000408  08000408  00001408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800040c  0800040c  0000140c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001410  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00001410  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00002000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00001410  2**0
                  CONTENTS, READONLY
 13 .debug_info   000009b6  00000000  00000000  00001440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000272  00000000  00000000  00001df6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000088  00000000  00000000  00002068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000058  00000000  00000000  000020f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00000e7b  00000000  00000000  00002148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000bb4  00000000  00000000  00002fc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00076387  00000000  00000000  00003b77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00079efe  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000108  00000000  00000000  00079f44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000051  00000000  00000000  0007a04c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080003f0 	.word	0x080003f0

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	080003f0 	.word	0x080003f0

080001d4 <main>:
#define PIN8				(1U << 8)
#define PIN13				(1U << 13)

static void tim2_callback(void);

int main(void){
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0

	RCC -> AHBENR |= GPIOEEN;
 80001d8:	4b1c      	ldr	r3, [pc, #112]	@ (800024c <main+0x78>)
 80001da:	695b      	ldr	r3, [r3, #20]
 80001dc:	4a1b      	ldr	r2, [pc, #108]	@ (800024c <main+0x78>)
 80001de:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80001e2:	6153      	str	r3, [r2, #20]
	GPIOE -> MODER |= (1U << 16);
 80001e4:	4b1a      	ldr	r3, [pc, #104]	@ (8000250 <main+0x7c>)
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	4a19      	ldr	r2, [pc, #100]	@ (8000250 <main+0x7c>)
 80001ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80001ee:	6013      	str	r3, [r2, #0]
	GPIOE -> MODER &=~(1U << 17);
 80001f0:	4b17      	ldr	r3, [pc, #92]	@ (8000250 <main+0x7c>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	4a16      	ldr	r2, [pc, #88]	@ (8000250 <main+0x7c>)
 80001f6:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80001fa:	6013      	str	r3, [r2, #0]

	GPIOE -> MODER |= (1U << 26);
 80001fc:	4b14      	ldr	r3, [pc, #80]	@ (8000250 <main+0x7c>)
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	4a13      	ldr	r2, [pc, #76]	@ (8000250 <main+0x7c>)
 8000202:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000206:	6013      	str	r3, [r2, #0]
	GPIOE -> MODER &=~(1U << 27);
 8000208:	4b11      	ldr	r3, [pc, #68]	@ (8000250 <main+0x7c>)
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	4a10      	ldr	r2, [pc, #64]	@ (8000250 <main+0x7c>)
 800020e:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 8000212:	6013      	str	r3, [r2, #0]

	tim2_1Hz_init();
 8000214:	f000 f85a 	bl	80002cc <tim2_1Hz_init>
	tim3_1Hz_interrupt_init();
 8000218:	f000 f87a 	bl	8000310 <tim3_1Hz_interrupt_init>

	while(1){
		//wait for UIF
		while(!(TIM2 -> SR & SR_UIF)){}
 800021c:	bf00      	nop
 800021e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000222:	691b      	ldr	r3, [r3, #16]
 8000224:	f003 0301 	and.w	r3, r3, #1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d0f8      	beq.n	800021e <main+0x4a>

		//clear UIF
		TIM2 -> SR &=~  SR_UIF;
 800022c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000230:	691b      	ldr	r3, [r3, #16]
 8000232:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000236:	f023 0301 	bic.w	r3, r3, #1
 800023a:	6113      	str	r3, [r2, #16]

		GPIOE -> ODR ^= PIN8;
 800023c:	4b04      	ldr	r3, [pc, #16]	@ (8000250 <main+0x7c>)
 800023e:	695b      	ldr	r3, [r3, #20]
 8000240:	4a03      	ldr	r2, [pc, #12]	@ (8000250 <main+0x7c>)
 8000242:	f483 7380 	eor.w	r3, r3, #256	@ 0x100
 8000246:	6153      	str	r3, [r2, #20]
		while(!(TIM2 -> SR & SR_UIF)){}
 8000248:	e7e8      	b.n	800021c <main+0x48>
 800024a:	bf00      	nop
 800024c:	40021000 	.word	0x40021000
 8000250:	48001000 	.word	0x48001000

08000254 <tim2_callback>:
	}
}

static void tim2_callback(void){
 8000254:	b480      	push	{r7}
 8000256:	af00      	add	r7, sp, #0
	GPIOE -> ODR ^= PIN13;
 8000258:	4b05      	ldr	r3, [pc, #20]	@ (8000270 <tim2_callback+0x1c>)
 800025a:	695b      	ldr	r3, [r3, #20]
 800025c:	4a04      	ldr	r2, [pc, #16]	@ (8000270 <tim2_callback+0x1c>)
 800025e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8000262:	6153      	str	r3, [r2, #20]
}
 8000264:	bf00      	nop
 8000266:	46bd      	mov	sp, r7
 8000268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop
 8000270:	48001000 	.word	0x48001000

08000274 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void){
 8000274:	b580      	push	{r7, lr}
 8000276:	af00      	add	r7, sp, #0
	TIM3 -> SR &=~  SR_UIF;
 8000278:	4b04      	ldr	r3, [pc, #16]	@ (800028c <TIM3_IRQHandler+0x18>)
 800027a:	691b      	ldr	r3, [r3, #16]
 800027c:	4a03      	ldr	r2, [pc, #12]	@ (800028c <TIM3_IRQHandler+0x18>)
 800027e:	f023 0301 	bic.w	r3, r3, #1
 8000282:	6113      	str	r3, [r2, #16]
	tim2_callback();
 8000284:	f7ff ffe6 	bl	8000254 <tim2_callback>
}
 8000288:	bf00      	nop
 800028a:	bd80      	pop	{r7, pc}
 800028c:	40000400 	.word	0x40000400

08000290 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000290:	b480      	push	{r7}
 8000292:	b083      	sub	sp, #12
 8000294:	af00      	add	r7, sp, #0
 8000296:	4603      	mov	r3, r0
 8000298:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800029a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800029e:	2b00      	cmp	r3, #0
 80002a0:	db0b      	blt.n	80002ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80002a2:	79fb      	ldrb	r3, [r7, #7]
 80002a4:	f003 021f 	and.w	r2, r3, #31
 80002a8:	4907      	ldr	r1, [pc, #28]	@ (80002c8 <__NVIC_EnableIRQ+0x38>)
 80002aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ae:	095b      	lsrs	r3, r3, #5
 80002b0:	2001      	movs	r0, #1
 80002b2:	fa00 f202 	lsl.w	r2, r0, r2
 80002b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80002ba:	bf00      	nop
 80002bc:	370c      	adds	r7, #12
 80002be:	46bd      	mov	sp, r7
 80002c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c4:	4770      	bx	lr
 80002c6:	bf00      	nop
 80002c8:	e000e100 	.word	0xe000e100

080002cc <tim2_1Hz_init>:
#define CR1_CEN				(1U << 0)

#define TIM3_EN				(1U << 1)
#define DIER_UIE			(1U << 0)

void tim2_1Hz_init(void){
 80002cc:	b480      	push	{r7}
 80002ce:	af00      	add	r7, sp, #0
	//Enable clock access to tim2
	RCC -> APB1ENR |= TIM2_EN;
 80002d0:	4b0e      	ldr	r3, [pc, #56]	@ (800030c <tim2_1Hz_init+0x40>)
 80002d2:	69db      	ldr	r3, [r3, #28]
 80002d4:	4a0d      	ldr	r2, [pc, #52]	@ (800030c <tim2_1Hz_init+0x40>)
 80002d6:	f043 0301 	orr.w	r3, r3, #1
 80002da:	61d3      	str	r3, [r2, #28]

	//Set prescalar value
	TIM2 -> PSC = 800 - 1; // 8000 000 / 800 = 10000
 80002dc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002e0:	f240 321f 	movw	r2, #799	@ 0x31f
 80002e4:	629a      	str	r2, [r3, #40]	@ 0x28

	//Set auto reload value
	TIM2 -> ARR = 10000 - 1;
 80002e6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002ea:	f242 720f 	movw	r2, #9999	@ 0x270f
 80002ee:	62da      	str	r2, [r3, #44]	@ 0x2c

	//Clear counter
	TIM2 -> CNT  = 0;
 80002f0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002f4:	2200      	movs	r2, #0
 80002f6:	625a      	str	r2, [r3, #36]	@ 0x24

	//Enable timer
	TIM2 -> CR1 = CR1_CEN;
 80002f8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002fc:	2201      	movs	r2, #1
 80002fe:	601a      	str	r2, [r3, #0]
}
 8000300:	bf00      	nop
 8000302:	46bd      	mov	sp, r7
 8000304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000308:	4770      	bx	lr
 800030a:	bf00      	nop
 800030c:	40021000 	.word	0x40021000

08000310 <tim3_1Hz_interrupt_init>:

void tim3_1Hz_interrupt_init(void){
 8000310:	b580      	push	{r7, lr}
 8000312:	af00      	add	r7, sp, #0
	//Enable clock access to tim2
	RCC -> APB1ENR |= TIM3_EN;
 8000314:	4b0d      	ldr	r3, [pc, #52]	@ (800034c <tim3_1Hz_interrupt_init+0x3c>)
 8000316:	69db      	ldr	r3, [r3, #28]
 8000318:	4a0c      	ldr	r2, [pc, #48]	@ (800034c <tim3_1Hz_interrupt_init+0x3c>)
 800031a:	f043 0302 	orr.w	r3, r3, #2
 800031e:	61d3      	str	r3, [r2, #28]

	//Set prescalar value
	TIM3 -> PSC = 400 - 1; // 8000 000 / 800 = 10000
 8000320:	4b0b      	ldr	r3, [pc, #44]	@ (8000350 <tim3_1Hz_interrupt_init+0x40>)
 8000322:	f240 128f 	movw	r2, #399	@ 0x18f
 8000326:	629a      	str	r2, [r3, #40]	@ 0x28

	//Set auto reload value
	TIM3 -> ARR = 10000 - 1;
 8000328:	4b09      	ldr	r3, [pc, #36]	@ (8000350 <tim3_1Hz_interrupt_init+0x40>)
 800032a:	f242 720f 	movw	r2, #9999	@ 0x270f
 800032e:	62da      	str	r2, [r3, #44]	@ 0x2c

	//Clear counter
	TIM3 -> CNT  = 0;
 8000330:	4b07      	ldr	r3, [pc, #28]	@ (8000350 <tim3_1Hz_interrupt_init+0x40>)
 8000332:	2200      	movs	r2, #0
 8000334:	625a      	str	r2, [r3, #36]	@ 0x24

	//Enable timer
	TIM3 -> CR1 = CR1_CEN;
 8000336:	4b06      	ldr	r3, [pc, #24]	@ (8000350 <tim3_1Hz_interrupt_init+0x40>)
 8000338:	2201      	movs	r2, #1
 800033a:	601a      	str	r2, [r3, #0]

	//Enable TIM interrupt
	TIM3 -> DIER = DIER_UIE;
 800033c:	4b04      	ldr	r3, [pc, #16]	@ (8000350 <tim3_1Hz_interrupt_init+0x40>)
 800033e:	2201      	movs	r2, #1
 8000340:	60da      	str	r2, [r3, #12]

	//Enable in NVIC
	NVIC_EnableIRQ(TIM3_IRQn);
 8000342:	201d      	movs	r0, #29
 8000344:	f7ff ffa4 	bl	8000290 <__NVIC_EnableIRQ>
}
 8000348:	bf00      	nop
 800034a:	bd80      	pop	{r7, pc}
 800034c:	40021000 	.word	0x40021000
 8000350:	40000400 	.word	0x40000400

08000354 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000354:	480d      	ldr	r0, [pc, #52]	@ (800038c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000356:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000358:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800035c:	480c      	ldr	r0, [pc, #48]	@ (8000390 <LoopForever+0x6>)
  ldr r1, =_edata
 800035e:	490d      	ldr	r1, [pc, #52]	@ (8000394 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000360:	4a0d      	ldr	r2, [pc, #52]	@ (8000398 <LoopForever+0xe>)
  movs r3, #0
 8000362:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000364:	e002      	b.n	800036c <LoopCopyDataInit>

08000366 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000366:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000368:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800036a:	3304      	adds	r3, #4

0800036c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800036c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800036e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000370:	d3f9      	bcc.n	8000366 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000372:	4a0a      	ldr	r2, [pc, #40]	@ (800039c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000374:	4c0a      	ldr	r4, [pc, #40]	@ (80003a0 <LoopForever+0x16>)
  movs r3, #0
 8000376:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000378:	e001      	b.n	800037e <LoopFillZerobss>

0800037a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800037a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800037c:	3204      	adds	r2, #4

0800037e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800037e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000380:	d3fb      	bcc.n	800037a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000382:	f000 f811 	bl	80003a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000386:	f7ff ff25 	bl	80001d4 <main>

0800038a <LoopForever>:

LoopForever:
  b LoopForever
 800038a:	e7fe      	b.n	800038a <LoopForever>
  ldr   r0, =_estack
 800038c:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000390:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000394:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000398:	08000410 	.word	0x08000410
  ldr r2, =_sbss
 800039c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003a0:	2000001c 	.word	0x2000001c

080003a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003a4:	e7fe      	b.n	80003a4 <ADC1_2_IRQHandler>
	...

080003a8 <__libc_init_array>:
 80003a8:	b570      	push	{r4, r5, r6, lr}
 80003aa:	4d0d      	ldr	r5, [pc, #52]	@ (80003e0 <__libc_init_array+0x38>)
 80003ac:	4c0d      	ldr	r4, [pc, #52]	@ (80003e4 <__libc_init_array+0x3c>)
 80003ae:	1b64      	subs	r4, r4, r5
 80003b0:	10a4      	asrs	r4, r4, #2
 80003b2:	2600      	movs	r6, #0
 80003b4:	42a6      	cmp	r6, r4
 80003b6:	d109      	bne.n	80003cc <__libc_init_array+0x24>
 80003b8:	4d0b      	ldr	r5, [pc, #44]	@ (80003e8 <__libc_init_array+0x40>)
 80003ba:	4c0c      	ldr	r4, [pc, #48]	@ (80003ec <__libc_init_array+0x44>)
 80003bc:	f000 f818 	bl	80003f0 <_init>
 80003c0:	1b64      	subs	r4, r4, r5
 80003c2:	10a4      	asrs	r4, r4, #2
 80003c4:	2600      	movs	r6, #0
 80003c6:	42a6      	cmp	r6, r4
 80003c8:	d105      	bne.n	80003d6 <__libc_init_array+0x2e>
 80003ca:	bd70      	pop	{r4, r5, r6, pc}
 80003cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80003d0:	4798      	blx	r3
 80003d2:	3601      	adds	r6, #1
 80003d4:	e7ee      	b.n	80003b4 <__libc_init_array+0xc>
 80003d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80003da:	4798      	blx	r3
 80003dc:	3601      	adds	r6, #1
 80003de:	e7f2      	b.n	80003c6 <__libc_init_array+0x1e>
 80003e0:	08000408 	.word	0x08000408
 80003e4:	08000408 	.word	0x08000408
 80003e8:	08000408 	.word	0x08000408
 80003ec:	0800040c 	.word	0x0800040c

080003f0 <_init>:
 80003f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003f2:	bf00      	nop
 80003f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003f6:	bc08      	pop	{r3}
 80003f8:	469e      	mov	lr, r3
 80003fa:	4770      	bx	lr

080003fc <_fini>:
 80003fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003fe:	bf00      	nop
 8000400:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000402:	bc08      	pop	{r3}
 8000404:	469e      	mov	lr, r3
 8000406:	4770      	bx	lr
