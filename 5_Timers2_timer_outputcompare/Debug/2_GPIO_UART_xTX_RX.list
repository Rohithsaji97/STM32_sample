
2_GPIO_UART_xTX_RX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002dc  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000470  08000478  00001478  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000470  08000470  00001478  2**0
                  CONTENTS
  4 .ARM          00000000  08000470  08000470  00001478  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000470  08000478  00001478  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000470  08000470  00001470  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000474  08000474  00001474  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001478  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00001478  2**0
                  CONTENTS
 10 .bss          00000020  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000020  20000020  00002000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00001478  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000061f  00000000  00000000  000014a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000027c  00000000  00000000  00001ac7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000098  00000000  00000000  00001d48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000065  00000000  00000000  00001de0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015ab8  00000000  00000000  00001e45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000c8e  00000000  00000000  000178fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00076012  00000000  00000000  0001858b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0008e59d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000158  00000000  00000000  0008e5e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005a  00000000  00000000  0008e738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000458 	.word	0x08000458

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	08000458 	.word	0x08000458

080001d4 <main>:
#define PIN8					(1U<<8)
#define LED_PIN					PIN8

char key;

int main(void){
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0


	RCC -> AHBENR |= GPIOEEN;
 80001d8:	4b15      	ldr	r3, [pc, #84]	@ (8000230 <main+0x5c>)
 80001da:	695b      	ldr	r3, [r3, #20]
 80001dc:	4a14      	ldr	r2, [pc, #80]	@ (8000230 <main+0x5c>)
 80001de:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80001e2:	6153      	str	r3, [r2, #20]

	GPIOE -> MODER |= (1U << 16);
 80001e4:	4b13      	ldr	r3, [pc, #76]	@ (8000234 <main+0x60>)
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	4a12      	ldr	r2, [pc, #72]	@ (8000234 <main+0x60>)
 80001ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80001ee:	6013      	str	r3, [r2, #0]
	GPIOE -> MODER &=~(1U << 17);
 80001f0:	4b10      	ldr	r3, [pc, #64]	@ (8000234 <main+0x60>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	4a0f      	ldr	r2, [pc, #60]	@ (8000234 <main+0x60>)
 80001f6:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80001fa:	6013      	str	r3, [r2, #0]

	usart_rxtx_init();
 80001fc:	f000 f81e 	bl	800023c <usart_rxtx_init>

	while(1){
		key = usart1_read();
 8000200:	f000 f8a2 	bl	8000348 <usart1_read>
 8000204:	4603      	mov	r3, r0
 8000206:	461a      	mov	r2, r3
 8000208:	4b0b      	ldr	r3, [pc, #44]	@ (8000238 <main+0x64>)
 800020a:	701a      	strb	r2, [r3, #0]
		if (key == '1'){
 800020c:	4b0a      	ldr	r3, [pc, #40]	@ (8000238 <main+0x64>)
 800020e:	781b      	ldrb	r3, [r3, #0]
 8000210:	2b31      	cmp	r3, #49	@ 0x31
 8000212:	d106      	bne.n	8000222 <main+0x4e>
			GPIOE -> ODR |= LED_PIN;
 8000214:	4b07      	ldr	r3, [pc, #28]	@ (8000234 <main+0x60>)
 8000216:	695b      	ldr	r3, [r3, #20]
 8000218:	4a06      	ldr	r2, [pc, #24]	@ (8000234 <main+0x60>)
 800021a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800021e:	6153      	str	r3, [r2, #20]
 8000220:	e7ee      	b.n	8000200 <main+0x2c>
		}
		else {
			GPIOE -> ODR |= ~LED_PIN;
 8000222:	4b04      	ldr	r3, [pc, #16]	@ (8000234 <main+0x60>)
 8000224:	695b      	ldr	r3, [r3, #20]
 8000226:	4a03      	ldr	r2, [pc, #12]	@ (8000234 <main+0x60>)
 8000228:	f463 7380 	orn	r3, r3, #256	@ 0x100
 800022c:	6153      	str	r3, [r2, #20]
		key = usart1_read();
 800022e:	e7e7      	b.n	8000200 <main+0x2c>
 8000230:	40021000 	.word	0x40021000
 8000234:	48001000 	.word	0x48001000
 8000238:	2000001c 	.word	0x2000001c

0800023c <usart_rxtx_init>:
int __io_putchar(int ch){
	usart1_write(ch);
	return ch;
}

void usart_rxtx_init(void){
 800023c:	b580      	push	{r7, lr}
 800023e:	af00      	add	r7, sp, #0
	//Configuring USART GPIO Pins
	//Enable clock access
	RCC ->AHBENR |= GPIOAEN;
 8000240:	4b3e      	ldr	r3, [pc, #248]	@ (800033c <usart_rxtx_init+0x100>)
 8000242:	695b      	ldr	r3, [r3, #20]
 8000244:	4a3d      	ldr	r2, [pc, #244]	@ (800033c <usart_rxtx_init+0x100>)
 8000246:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800024a:	6153      	str	r3, [r2, #20]

	//Set PA9 to alternate function mode
	GPIOA -> MODER |= (1U <<19);
 800024c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000250:	681b      	ldr	r3, [r3, #0]
 8000252:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000256:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800025a:	6013      	str	r3, [r2, #0]
	GPIOA -> MODER &=~(1U <<18);
 800025c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000266:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800026a:	6013      	str	r3, [r2, #0]

	//Set PA9 alternate function to (AF7)
	GPIOA -> AFR[1] |= (1U << 4);
 800026c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000270:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000272:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000276:	f043 0310 	orr.w	r3, r3, #16
 800027a:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOA -> AFR[1] |= (1U << 5);
 800027c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000280:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000282:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000286:	f043 0320 	orr.w	r3, r3, #32
 800028a:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOA -> AFR[1] |= (1U << 6);
 800028c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000290:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000292:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000296:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800029a:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOA -> AFR[1] &=~(1U << 7);
 800029c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80002a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80002a2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80002a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80002aa:	6253      	str	r3, [r2, #36]	@ 0x24

	//Set PA10 to alternate function mode
	GPIOA -> MODER |= (1U <<21);
 80002ac:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80002b6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80002ba:	6013      	str	r3, [r2, #0]
	GPIOA -> MODER &=~(1U <<20);
 80002bc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80002c6:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80002ca:	6013      	str	r3, [r2, #0]

	//Set PA10 to alternate function
	GPIOA -> AFR[1] |= (1U << 8);
 80002cc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80002d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80002d2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80002d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80002da:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOA -> AFR[1] |= (1U << 9);
 80002dc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80002e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80002e2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80002e6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80002ea:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOA -> AFR[1] |= (1U << 10);
 80002ec:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80002f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80002f2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80002f6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80002fa:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOA -> AFR[1] &=~(1U << 11);
 80002fc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000300:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000302:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000306:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800030a:	6253      	str	r3, [r2, #36]	@ 0x24

	//Configure UART module
	//Enable clock access to USART1
	RCC -> APB2ENR |= USART1EN;
 800030c:	4b0b      	ldr	r3, [pc, #44]	@ (800033c <usart_rxtx_init+0x100>)
 800030e:	699b      	ldr	r3, [r3, #24]
 8000310:	4a0a      	ldr	r2, [pc, #40]	@ (800033c <usart_rxtx_init+0x100>)
 8000312:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000316:	6193      	str	r3, [r2, #24]

	//Configure Baud rate
	uart_set_baudrate(USART1, APB1_CLK, USART_BAUDRATE);
 8000318:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800031c:	4908      	ldr	r1, [pc, #32]	@ (8000340 <usart_rxtx_init+0x104>)
 800031e:	4809      	ldr	r0, [pc, #36]	@ (8000344 <usart_rxtx_init+0x108>)
 8000320:	f000 f826 	bl	8000370 <uart_set_baudrate>

	//configure the transfer direction and Receiver direction
	USART1 -> CR1 = (CR1_TE | CR1_RE);
 8000324:	4b07      	ldr	r3, [pc, #28]	@ (8000344 <usart_rxtx_init+0x108>)
 8000326:	220c      	movs	r2, #12
 8000328:	601a      	str	r2, [r3, #0]

	//Enable USART module
	USART1 -> CR1 |= CR1_UE;
 800032a:	4b06      	ldr	r3, [pc, #24]	@ (8000344 <usart_rxtx_init+0x108>)
 800032c:	681b      	ldr	r3, [r3, #0]
 800032e:	4a05      	ldr	r2, [pc, #20]	@ (8000344 <usart_rxtx_init+0x108>)
 8000330:	f043 0301 	orr.w	r3, r3, #1
 8000334:	6013      	str	r3, [r2, #0]

}
 8000336:	bf00      	nop
 8000338:	bd80      	pop	{r7, pc}
 800033a:	bf00      	nop
 800033c:	40021000 	.word	0x40021000
 8000340:	00f42400 	.word	0x00f42400
 8000344:	40013800 	.word	0x40013800

08000348 <usart1_read>:
	//Enable USART module
	USART1 -> CR1 |= CR1_UE;

}

char usart1_read(void){
 8000348:	b480      	push	{r7}
 800034a:	af00      	add	r7, sp, #0
	//Make sure the receiver data register is not empty
	while(!(USART1 -> ISR & ISR_RXNE)){}
 800034c:	bf00      	nop
 800034e:	4b07      	ldr	r3, [pc, #28]	@ (800036c <usart1_read+0x24>)
 8000350:	69db      	ldr	r3, [r3, #28]
 8000352:	f003 0320 	and.w	r3, r3, #32
 8000356:	2b00      	cmp	r3, #0
 8000358:	d0f9      	beq.n	800034e <usart1_read+0x6>

	//Read data
	return USART1 -> TDR;
 800035a:	4b04      	ldr	r3, [pc, #16]	@ (800036c <usart1_read+0x24>)
 800035c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800035e:	b29b      	uxth	r3, r3
 8000360:	b2db      	uxtb	r3, r3
}
 8000362:	4618      	mov	r0, r3
 8000364:	46bd      	mov	sp, r7
 8000366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036a:	4770      	bx	lr
 800036c:	40013800 	.word	0x40013800

08000370 <uart_set_baudrate>:

	//Write to transmit data
	USART1 -> TDR = (ch && 0xFF);
}

static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t BaudRate){
 8000370:	b580      	push	{r7, lr}
 8000372:	b084      	sub	sp, #16
 8000374:	af00      	add	r7, sp, #0
 8000376:	60f8      	str	r0, [r7, #12]
 8000378:	60b9      	str	r1, [r7, #8]
 800037a:	607a      	str	r2, [r7, #4]
	USARTx -> BRR = compute_uart_bd(PeriphClk, BaudRate);
 800037c:	6879      	ldr	r1, [r7, #4]
 800037e:	68b8      	ldr	r0, [r7, #8]
 8000380:	f000 f808 	bl	8000394 <compute_uart_bd>
 8000384:	4603      	mov	r3, r0
 8000386:	461a      	mov	r2, r3
 8000388:	68fb      	ldr	r3, [r7, #12]
 800038a:	60da      	str	r2, [r3, #12]
}
 800038c:	bf00      	nop
 800038e:	3710      	adds	r7, #16
 8000390:	46bd      	mov	sp, r7
 8000392:	bd80      	pop	{r7, pc}

08000394 <compute_uart_bd>:

static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate){
 8000394:	b480      	push	{r7}
 8000396:	b083      	sub	sp, #12
 8000398:	af00      	add	r7, sp, #0
 800039a:	6078      	str	r0, [r7, #4]
 800039c:	6039      	str	r1, [r7, #0]
	return ((PeriphClk + (BaudRate/2U))/BaudRate);
 800039e:	683b      	ldr	r3, [r7, #0]
 80003a0:	085a      	lsrs	r2, r3, #1
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	441a      	add	r2, r3
 80003a6:	683b      	ldr	r3, [r7, #0]
 80003a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80003ac:	b29b      	uxth	r3, r3
}
 80003ae:	4618      	mov	r0, r3
 80003b0:	370c      	adds	r7, #12
 80003b2:	46bd      	mov	sp, r7
 80003b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b8:	4770      	bx	lr
	...

080003bc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003bc:	480d      	ldr	r0, [pc, #52]	@ (80003f4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003be:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80003c0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003c4:	480c      	ldr	r0, [pc, #48]	@ (80003f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80003c6:	490d      	ldr	r1, [pc, #52]	@ (80003fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80003c8:	4a0d      	ldr	r2, [pc, #52]	@ (8000400 <LoopForever+0xe>)
  movs r3, #0
 80003ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003cc:	e002      	b.n	80003d4 <LoopCopyDataInit>

080003ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003d2:	3304      	adds	r3, #4

080003d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003d8:	d3f9      	bcc.n	80003ce <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003da:	4a0a      	ldr	r2, [pc, #40]	@ (8000404 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003dc:	4c0a      	ldr	r4, [pc, #40]	@ (8000408 <LoopForever+0x16>)
  movs r3, #0
 80003de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003e0:	e001      	b.n	80003e6 <LoopFillZerobss>

080003e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003e4:	3204      	adds	r2, #4

080003e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003e8:	d3fb      	bcc.n	80003e2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003ea:	f000 f811 	bl	8000410 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003ee:	f7ff fef1 	bl	80001d4 <main>

080003f2 <LoopForever>:

LoopForever:
  b LoopForever
 80003f2:	e7fe      	b.n	80003f2 <LoopForever>
  ldr   r0, =_estack
 80003f4:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80003f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003fc:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000400:	08000478 	.word	0x08000478
  ldr r2, =_sbss
 8000404:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000408:	20000020 	.word	0x20000020

0800040c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800040c:	e7fe      	b.n	800040c <ADC1_2_IRQHandler>
	...

08000410 <__libc_init_array>:
 8000410:	b570      	push	{r4, r5, r6, lr}
 8000412:	4d0d      	ldr	r5, [pc, #52]	@ (8000448 <__libc_init_array+0x38>)
 8000414:	4c0d      	ldr	r4, [pc, #52]	@ (800044c <__libc_init_array+0x3c>)
 8000416:	1b64      	subs	r4, r4, r5
 8000418:	10a4      	asrs	r4, r4, #2
 800041a:	2600      	movs	r6, #0
 800041c:	42a6      	cmp	r6, r4
 800041e:	d109      	bne.n	8000434 <__libc_init_array+0x24>
 8000420:	4d0b      	ldr	r5, [pc, #44]	@ (8000450 <__libc_init_array+0x40>)
 8000422:	4c0c      	ldr	r4, [pc, #48]	@ (8000454 <__libc_init_array+0x44>)
 8000424:	f000 f818 	bl	8000458 <_init>
 8000428:	1b64      	subs	r4, r4, r5
 800042a:	10a4      	asrs	r4, r4, #2
 800042c:	2600      	movs	r6, #0
 800042e:	42a6      	cmp	r6, r4
 8000430:	d105      	bne.n	800043e <__libc_init_array+0x2e>
 8000432:	bd70      	pop	{r4, r5, r6, pc}
 8000434:	f855 3b04 	ldr.w	r3, [r5], #4
 8000438:	4798      	blx	r3
 800043a:	3601      	adds	r6, #1
 800043c:	e7ee      	b.n	800041c <__libc_init_array+0xc>
 800043e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000442:	4798      	blx	r3
 8000444:	3601      	adds	r6, #1
 8000446:	e7f2      	b.n	800042e <__libc_init_array+0x1e>
 8000448:	08000470 	.word	0x08000470
 800044c:	08000470 	.word	0x08000470
 8000450:	08000470 	.word	0x08000470
 8000454:	08000474 	.word	0x08000474

08000458 <_init>:
 8000458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800045a:	bf00      	nop
 800045c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800045e:	bc08      	pop	{r3}
 8000460:	469e      	mov	lr, r3
 8000462:	4770      	bx	lr

08000464 <_fini>:
 8000464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000466:	bf00      	nop
 8000468:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800046a:	bc08      	pop	{r3}
 800046c:	469e      	mov	lr, r3
 800046e:	4770      	bx	lr
