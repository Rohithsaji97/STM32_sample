
5_Timers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000019c  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000330  08000338  00001338  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000330  08000330  00001338  2**0
                  CONTENTS
  4 .ARM          00000000  08000330  08000330  00001338  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000330  08000338  00001338  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000330  08000330  00001330  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000334  08000334  00001334  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001338  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00001338  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00002000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00001338  2**0
                  CONTENTS, READONLY
 13 .debug_info   000005f0  00000000  00000000  00001368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000190  00000000  00000000  00001958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000068  00000000  00000000  00001ae8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000003f  00000000  00000000  00001b50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00000e6f  00000000  00000000  00001b8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000b09  00000000  00000000  000029fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00075f7a  00000000  00000000  00003507  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00079481  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000088  00000000  00000000  000794c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000051  00000000  00000000  0007954c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000318 	.word	0x08000318

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	08000318 	.word	0x08000318

080001d4 <main>:
#define GPIOEEN				(1U << 21)
#define PIN8				(1U << 8)
#define LED_PIN				PIN8


int main(void){
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0

	RCC -> AHBENR |= GPIOEEN;
 80001d8:	4b15      	ldr	r3, [pc, #84]	@ (8000230 <main+0x5c>)
 80001da:	695b      	ldr	r3, [r3, #20]
 80001dc:	4a14      	ldr	r2, [pc, #80]	@ (8000230 <main+0x5c>)
 80001de:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80001e2:	6153      	str	r3, [r2, #20]
	GPIOE -> MODER |= (1U << 16);
 80001e4:	4b13      	ldr	r3, [pc, #76]	@ (8000234 <main+0x60>)
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	4a12      	ldr	r2, [pc, #72]	@ (8000234 <main+0x60>)
 80001ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80001ee:	6013      	str	r3, [r2, #0]
	GPIOE -> MODER &=~(1U << 17);
 80001f0:	4b10      	ldr	r3, [pc, #64]	@ (8000234 <main+0x60>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	4a0f      	ldr	r2, [pc, #60]	@ (8000234 <main+0x60>)
 80001f6:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80001fa:	6013      	str	r3, [r2, #0]

	tim2_1Hz_init();
 80001fc:	f000 f81c 	bl	8000238 <tim2_1Hz_init>

	while(1){
		//wait for UIF
		while(!(TIM2 -> SR & SR_UIF)){}
 8000200:	bf00      	nop
 8000202:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000206:	691b      	ldr	r3, [r3, #16]
 8000208:	f003 0301 	and.w	r3, r3, #1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d0f8      	beq.n	8000202 <main+0x2e>

		//clear UIF
		TIM2 -> SR &=~  SR_UIF;
 8000210:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000214:	691b      	ldr	r3, [r3, #16]
 8000216:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800021a:	f023 0301 	bic.w	r3, r3, #1
 800021e:	6113      	str	r3, [r2, #16]

		GPIOE -> ODR ^= LED_PIN;
 8000220:	4b04      	ldr	r3, [pc, #16]	@ (8000234 <main+0x60>)
 8000222:	695b      	ldr	r3, [r3, #20]
 8000224:	4a03      	ldr	r2, [pc, #12]	@ (8000234 <main+0x60>)
 8000226:	f483 7380 	eor.w	r3, r3, #256	@ 0x100
 800022a:	6153      	str	r3, [r2, #20]
		while(!(TIM2 -> SR & SR_UIF)){}
 800022c:	e7e8      	b.n	8000200 <main+0x2c>
 800022e:	bf00      	nop
 8000230:	40021000 	.word	0x40021000
 8000234:	48001000 	.word	0x48001000

08000238 <tim2_1Hz_init>:
#include "stm32f3xx.h"

#define TIM2_EN				(1U << 0)
#define CR1_CEN				(1U << 0)

void tim2_1Hz_init(void){
 8000238:	b480      	push	{r7}
 800023a:	af00      	add	r7, sp, #0
	//Enable clock access to tim2
	RCC -> APB1ENR |= TIM2_EN;
 800023c:	4b0e      	ldr	r3, [pc, #56]	@ (8000278 <tim2_1Hz_init+0x40>)
 800023e:	69db      	ldr	r3, [r3, #28]
 8000240:	4a0d      	ldr	r2, [pc, #52]	@ (8000278 <tim2_1Hz_init+0x40>)
 8000242:	f043 0301 	orr.w	r3, r3, #1
 8000246:	61d3      	str	r3, [r2, #28]

	//Set prescalar value
	TIM2 -> PSC = 800 - 1; // 16000 000 / 1600 = 10000
 8000248:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800024c:	f240 321f 	movw	r2, #799	@ 0x31f
 8000250:	629a      	str	r2, [r3, #40]	@ 0x28

	//Set auto reload value
	TIM2 -> ARR = 10000 - 1;
 8000252:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000256:	f242 720f 	movw	r2, #9999	@ 0x270f
 800025a:	62da      	str	r2, [r3, #44]	@ 0x2c

	//Clear counter
	TIM2 -> CNT  = 0;
 800025c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000260:	2200      	movs	r2, #0
 8000262:	625a      	str	r2, [r3, #36]	@ 0x24

	//Enable timer
	TIM2 -> CR1 = CR1_CEN;
 8000264:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000268:	2201      	movs	r2, #1
 800026a:	601a      	str	r2, [r3, #0]
}
 800026c:	bf00      	nop
 800026e:	46bd      	mov	sp, r7
 8000270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000274:	4770      	bx	lr
 8000276:	bf00      	nop
 8000278:	40021000 	.word	0x40021000

0800027c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800027c:	480d      	ldr	r0, [pc, #52]	@ (80002b4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800027e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000280:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000284:	480c      	ldr	r0, [pc, #48]	@ (80002b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000286:	490d      	ldr	r1, [pc, #52]	@ (80002bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000288:	4a0d      	ldr	r2, [pc, #52]	@ (80002c0 <LoopForever+0xe>)
  movs r3, #0
 800028a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800028c:	e002      	b.n	8000294 <LoopCopyDataInit>

0800028e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800028e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000290:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000292:	3304      	adds	r3, #4

08000294 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000294:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000296:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000298:	d3f9      	bcc.n	800028e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800029a:	4a0a      	ldr	r2, [pc, #40]	@ (80002c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800029c:	4c0a      	ldr	r4, [pc, #40]	@ (80002c8 <LoopForever+0x16>)
  movs r3, #0
 800029e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002a0:	e001      	b.n	80002a6 <LoopFillZerobss>

080002a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002a4:	3204      	adds	r2, #4

080002a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002a8:	d3fb      	bcc.n	80002a2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002aa:	f000 f811 	bl	80002d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002ae:	f7ff ff91 	bl	80001d4 <main>

080002b2 <LoopForever>:

LoopForever:
  b LoopForever
 80002b2:	e7fe      	b.n	80002b2 <LoopForever>
  ldr   r0, =_estack
 80002b4:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80002b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002bc:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002c0:	08000338 	.word	0x08000338
  ldr r2, =_sbss
 80002c4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002c8:	2000001c 	.word	0x2000001c

080002cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002cc:	e7fe      	b.n	80002cc <ADC1_2_IRQHandler>
	...

080002d0 <__libc_init_array>:
 80002d0:	b570      	push	{r4, r5, r6, lr}
 80002d2:	4d0d      	ldr	r5, [pc, #52]	@ (8000308 <__libc_init_array+0x38>)
 80002d4:	4c0d      	ldr	r4, [pc, #52]	@ (800030c <__libc_init_array+0x3c>)
 80002d6:	1b64      	subs	r4, r4, r5
 80002d8:	10a4      	asrs	r4, r4, #2
 80002da:	2600      	movs	r6, #0
 80002dc:	42a6      	cmp	r6, r4
 80002de:	d109      	bne.n	80002f4 <__libc_init_array+0x24>
 80002e0:	4d0b      	ldr	r5, [pc, #44]	@ (8000310 <__libc_init_array+0x40>)
 80002e2:	4c0c      	ldr	r4, [pc, #48]	@ (8000314 <__libc_init_array+0x44>)
 80002e4:	f000 f818 	bl	8000318 <_init>
 80002e8:	1b64      	subs	r4, r4, r5
 80002ea:	10a4      	asrs	r4, r4, #2
 80002ec:	2600      	movs	r6, #0
 80002ee:	42a6      	cmp	r6, r4
 80002f0:	d105      	bne.n	80002fe <__libc_init_array+0x2e>
 80002f2:	bd70      	pop	{r4, r5, r6, pc}
 80002f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80002f8:	4798      	blx	r3
 80002fa:	3601      	adds	r6, #1
 80002fc:	e7ee      	b.n	80002dc <__libc_init_array+0xc>
 80002fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8000302:	4798      	blx	r3
 8000304:	3601      	adds	r6, #1
 8000306:	e7f2      	b.n	80002ee <__libc_init_array+0x1e>
 8000308:	08000330 	.word	0x08000330
 800030c:	08000330 	.word	0x08000330
 8000310:	08000330 	.word	0x08000330
 8000314:	08000334 	.word	0x08000334

08000318 <_init>:
 8000318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800031a:	bf00      	nop
 800031c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800031e:	bc08      	pop	{r3}
 8000320:	469e      	mov	lr, r3
 8000322:	4770      	bx	lr

08000324 <_fini>:
 8000324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000326:	bf00      	nop
 8000328:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800032a:	bc08      	pop	{r3}
 800032c:	469e      	mov	lr, r3
 800032e:	4770      	bx	lr
