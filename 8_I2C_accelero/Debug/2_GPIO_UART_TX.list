
2_GPIO_UART_TX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000234  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003c8  080003d0  000013d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003c8  080003c8  000013d0  2**0
                  CONTENTS
  4 .ARM          00000000  080003c8  080003c8  000013d0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003c8  080003d0  000013d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003c8  080003c8  000013c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080003cc  080003cc  000013cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000013d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000013d0  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00002000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000013d0  2**0
                  CONTENTS, READONLY
 13 .debug_info   000003bd  00000000  00000000  00001400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000016d  00000000  00000000  000017bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000068  00000000  00000000  00001930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000045  00000000  00000000  00001998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00014d3a  00000000  00000000  000019dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000005b8  00000000  00000000  00016717  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007258f  00000000  00000000  00016ccf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0008925e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000000e8  00000000  00000000  000892a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000056  00000000  00000000  0008938c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080003b0 	.word	0x080003b0

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	080003b0 	.word	0x080003b0

080001d4 <main>:

void usart_tx_init(void);
void usart2_write(int ch);


int main(void){
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0

	usart_tx_init();
 80001d8:	f000 f804 	bl	80001e4 <usart_tx_init>

	while(1){
		usart2_write('Y');
 80001dc:	2059      	movs	r0, #89	@ 0x59
 80001de:	f000 f857 	bl	8000290 <usart2_write>
 80001e2:	e7fb      	b.n	80001dc <main+0x8>

080001e4 <usart_tx_init>:
	}
}

void usart_tx_init(void){
 80001e4:	b580      	push	{r7, lr}
 80001e6:	af00      	add	r7, sp, #0
	//Configuring USART GPIO Pins
	//Enable clock access
	RCC ->AHBENR |= GPIOAEN;
 80001e8:	4b26      	ldr	r3, [pc, #152]	@ (8000284 <usart_tx_init+0xa0>)
 80001ea:	695b      	ldr	r3, [r3, #20]
 80001ec:	4a25      	ldr	r2, [pc, #148]	@ (8000284 <usart_tx_init+0xa0>)
 80001ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80001f2:	6153      	str	r3, [r2, #20]

	//Set PA9 to alternate function mode
	GPIOA -> MODER |= (1U <<19);
 80001f4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80001f8:	681b      	ldr	r3, [r3, #0]
 80001fa:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80001fe:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000202:	6013      	str	r3, [r2, #0]
	GPIOA -> MODER &=~(1U <<18);
 8000204:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000208:	681b      	ldr	r3, [r3, #0]
 800020a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800020e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000212:	6013      	str	r3, [r2, #0]

	//Set PA9 alternate function to (AF7)
	GPIOA -> AFR[1] |= (1U << 4);
 8000214:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000218:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800021a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800021e:	f043 0310 	orr.w	r3, r3, #16
 8000222:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOA -> AFR[1] |= (1U << 5);
 8000224:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000228:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800022a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800022e:	f043 0320 	orr.w	r3, r3, #32
 8000232:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOA -> AFR[1] |= (1U << 6);
 8000234:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000238:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800023a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800023e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000242:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOA -> AFR[1] &=~(1U << 7);
 8000244:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000248:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800024a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800024e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000252:	6253      	str	r3, [r2, #36]	@ 0x24

	//Configure UART module
	//Enable clock access to USART1
	RCC -> APB2ENR |= USART1EN;
 8000254:	4b0b      	ldr	r3, [pc, #44]	@ (8000284 <usart_tx_init+0xa0>)
 8000256:	699b      	ldr	r3, [r3, #24]
 8000258:	4a0a      	ldr	r2, [pc, #40]	@ (8000284 <usart_tx_init+0xa0>)
 800025a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800025e:	6193      	str	r3, [r2, #24]

	//Configure Baud rate
	uart_set_baudrate(USART1, APB1_CLK, USART_BAUDRATE);
 8000260:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000264:	4908      	ldr	r1, [pc, #32]	@ (8000288 <usart_tx_init+0xa4>)
 8000266:	4809      	ldr	r0, [pc, #36]	@ (800028c <usart_tx_init+0xa8>)
 8000268:	f000 f82e 	bl	80002c8 <uart_set_baudrate>

	//configure the transfer direction
	USART1 -> CR1 = CR1_TE;
 800026c:	4b07      	ldr	r3, [pc, #28]	@ (800028c <usart_tx_init+0xa8>)
 800026e:	2208      	movs	r2, #8
 8000270:	601a      	str	r2, [r3, #0]

	//Enable USART module
	USART1 -> CR1 |= CR1_UE;
 8000272:	4b06      	ldr	r3, [pc, #24]	@ (800028c <usart_tx_init+0xa8>)
 8000274:	681b      	ldr	r3, [r3, #0]
 8000276:	4a05      	ldr	r2, [pc, #20]	@ (800028c <usart_tx_init+0xa8>)
 8000278:	f043 0301 	orr.w	r3, r3, #1
 800027c:	6013      	str	r3, [r2, #0]

}
 800027e:	bf00      	nop
 8000280:	bd80      	pop	{r7, pc}
 8000282:	bf00      	nop
 8000284:	40021000 	.word	0x40021000
 8000288:	00f42400 	.word	0x00f42400
 800028c:	40013800 	.word	0x40013800

08000290 <usart2_write>:

void usart2_write(int ch){
 8000290:	b480      	push	{r7}
 8000292:	b083      	sub	sp, #12
 8000294:	af00      	add	r7, sp, #0
 8000296:	6078      	str	r0, [r7, #4]
	//Make sure the transmit data register is empty
	while(!(USART1 -> ISR & ISR_TXE)){}
 8000298:	bf00      	nop
 800029a:	4b0a      	ldr	r3, [pc, #40]	@ (80002c4 <usart2_write+0x34>)
 800029c:	69db      	ldr	r3, [r3, #28]
 800029e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d0f9      	beq.n	800029a <usart2_write+0xa>

	//Write to transmit data
	USART1 -> TDR = (ch && 0xFF);
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	bf14      	ite	ne
 80002ac:	2301      	movne	r3, #1
 80002ae:	2300      	moveq	r3, #0
 80002b0:	b2da      	uxtb	r2, r3
 80002b2:	4b04      	ldr	r3, [pc, #16]	@ (80002c4 <usart2_write+0x34>)
 80002b4:	851a      	strh	r2, [r3, #40]	@ 0x28
}
 80002b6:	bf00      	nop
 80002b8:	370c      	adds	r7, #12
 80002ba:	46bd      	mov	sp, r7
 80002bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c0:	4770      	bx	lr
 80002c2:	bf00      	nop
 80002c4:	40013800 	.word	0x40013800

080002c8 <uart_set_baudrate>:

static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t BaudRate){
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b084      	sub	sp, #16
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	60f8      	str	r0, [r7, #12]
 80002d0:	60b9      	str	r1, [r7, #8]
 80002d2:	607a      	str	r2, [r7, #4]
	USARTx -> BRR = compute_uart_bd(PeriphClk, BaudRate);
 80002d4:	6879      	ldr	r1, [r7, #4]
 80002d6:	68b8      	ldr	r0, [r7, #8]
 80002d8:	f000 f808 	bl	80002ec <compute_uart_bd>
 80002dc:	4603      	mov	r3, r0
 80002de:	461a      	mov	r2, r3
 80002e0:	68fb      	ldr	r3, [r7, #12]
 80002e2:	60da      	str	r2, [r3, #12]
}
 80002e4:	bf00      	nop
 80002e6:	3710      	adds	r7, #16
 80002e8:	46bd      	mov	sp, r7
 80002ea:	bd80      	pop	{r7, pc}

080002ec <compute_uart_bd>:

static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate){
 80002ec:	b480      	push	{r7}
 80002ee:	b083      	sub	sp, #12
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	6078      	str	r0, [r7, #4]
 80002f4:	6039      	str	r1, [r7, #0]
	return ((PeriphClk + (BaudRate/2U))/BaudRate);
 80002f6:	683b      	ldr	r3, [r7, #0]
 80002f8:	085a      	lsrs	r2, r3, #1
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	441a      	add	r2, r3
 80002fe:	683b      	ldr	r3, [r7, #0]
 8000300:	fbb2 f3f3 	udiv	r3, r2, r3
 8000304:	b29b      	uxth	r3, r3
}
 8000306:	4618      	mov	r0, r3
 8000308:	370c      	adds	r7, #12
 800030a:	46bd      	mov	sp, r7
 800030c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000310:	4770      	bx	lr
	...

08000314 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000314:	480d      	ldr	r0, [pc, #52]	@ (800034c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000316:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000318:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800031c:	480c      	ldr	r0, [pc, #48]	@ (8000350 <LoopForever+0x6>)
  ldr r1, =_edata
 800031e:	490d      	ldr	r1, [pc, #52]	@ (8000354 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000320:	4a0d      	ldr	r2, [pc, #52]	@ (8000358 <LoopForever+0xe>)
  movs r3, #0
 8000322:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000324:	e002      	b.n	800032c <LoopCopyDataInit>

08000326 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000326:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000328:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800032a:	3304      	adds	r3, #4

0800032c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800032c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800032e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000330:	d3f9      	bcc.n	8000326 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000332:	4a0a      	ldr	r2, [pc, #40]	@ (800035c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000334:	4c0a      	ldr	r4, [pc, #40]	@ (8000360 <LoopForever+0x16>)
  movs r3, #0
 8000336:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000338:	e001      	b.n	800033e <LoopFillZerobss>

0800033a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800033a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800033c:	3204      	adds	r2, #4

0800033e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800033e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000340:	d3fb      	bcc.n	800033a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000342:	f000 f811 	bl	8000368 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000346:	f7ff ff45 	bl	80001d4 <main>

0800034a <LoopForever>:

LoopForever:
  b LoopForever
 800034a:	e7fe      	b.n	800034a <LoopForever>
  ldr   r0, =_estack
 800034c:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000350:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000354:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000358:	080003d0 	.word	0x080003d0
  ldr r2, =_sbss
 800035c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000360:	2000001c 	.word	0x2000001c

08000364 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000364:	e7fe      	b.n	8000364 <ADC1_2_IRQHandler>
	...

08000368 <__libc_init_array>:
 8000368:	b570      	push	{r4, r5, r6, lr}
 800036a:	4d0d      	ldr	r5, [pc, #52]	@ (80003a0 <__libc_init_array+0x38>)
 800036c:	4c0d      	ldr	r4, [pc, #52]	@ (80003a4 <__libc_init_array+0x3c>)
 800036e:	1b64      	subs	r4, r4, r5
 8000370:	10a4      	asrs	r4, r4, #2
 8000372:	2600      	movs	r6, #0
 8000374:	42a6      	cmp	r6, r4
 8000376:	d109      	bne.n	800038c <__libc_init_array+0x24>
 8000378:	4d0b      	ldr	r5, [pc, #44]	@ (80003a8 <__libc_init_array+0x40>)
 800037a:	4c0c      	ldr	r4, [pc, #48]	@ (80003ac <__libc_init_array+0x44>)
 800037c:	f000 f818 	bl	80003b0 <_init>
 8000380:	1b64      	subs	r4, r4, r5
 8000382:	10a4      	asrs	r4, r4, #2
 8000384:	2600      	movs	r6, #0
 8000386:	42a6      	cmp	r6, r4
 8000388:	d105      	bne.n	8000396 <__libc_init_array+0x2e>
 800038a:	bd70      	pop	{r4, r5, r6, pc}
 800038c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000390:	4798      	blx	r3
 8000392:	3601      	adds	r6, #1
 8000394:	e7ee      	b.n	8000374 <__libc_init_array+0xc>
 8000396:	f855 3b04 	ldr.w	r3, [r5], #4
 800039a:	4798      	blx	r3
 800039c:	3601      	adds	r6, #1
 800039e:	e7f2      	b.n	8000386 <__libc_init_array+0x1e>
 80003a0:	080003c8 	.word	0x080003c8
 80003a4:	080003c8 	.word	0x080003c8
 80003a8:	080003c8 	.word	0x080003c8
 80003ac:	080003cc 	.word	0x080003cc

080003b0 <_init>:
 80003b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003b2:	bf00      	nop
 80003b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003b6:	bc08      	pop	{r3}
 80003b8:	469e      	mov	lr, r3
 80003ba:	4770      	bx	lr

080003bc <_fini>:
 80003bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003be:	bf00      	nop
 80003c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003c2:	bc08      	pop	{r3}
 80003c4:	469e      	mov	lr, r3
 80003c6:	4770      	bx	lr
